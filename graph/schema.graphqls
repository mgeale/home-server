type Balance {
  ExternalId: String!
  name: String!
  balance: Float!
  balanceaud: Float!
  pricebookid: String!
  productid: String!
  created: String!
}

type Transaction {
  ExternalId: String!
  name: String!
  amount: Float!
  date: String!
  type: String!
  created: String!
}

input RefreshTokenInput{
  token: String!
}

input Login {
  username: String!
  password: String!
}

input NewBalance {
  name: String!
  balance: Float!
  balanceaud: Float!
  pricebookid: String!
  productid: String!
}

input NewTransaction {
  name: String!
  amount: Float!
  date: String!
  type: String!
}

input UpdateBalance {
  ExternalId: String!
  name: String!
  balance: Float!
  balanceaud: Float!
  pricebookid: String!
  productid: String!
}

input UpdateTransaction {
  ExternalId: String!
  name: String!
  amount: Float!
  date: String!
  type: String!
}

enum FilterKind {
  EQUALS
  NOT_EQUALS
  CONTAINS
  GREATER_THAN
  GREATER_THAN_OR_EQUAL_TO
  LESS_THAN
  LESS_THAN_OR_EQUAL_TO
  AND_
  OR_
  NOT_
}

enum SortDirection {
  ASC
  DESC
}

enum BalanceField {
  ExternalId
  name
  balance
  balanceaud
  pricebookid
  productid
  created
}

input BalanceFilter {
  field: BalanceField
  kind: FilterKind!
  value: String
  subfilters: [BalanceFilter!] = []
}

input BalanceSort {
  field: BalanceField!
  direction: SortDirection!
}

enum TransactionField {
  ExternalId
  name
  amount
  date
  type
  created
}

input TransactionFilter {
  field: TransactionField
  kind: FilterKind!
  value: String
  subfilters: [TransactionFilter!] = []
}

input TransactionSort {
  field: TransactionField!
  direction: SortDirection!
}

type Query {
  balances(
    where: BalanceFilter
    orderBy: BalanceSort! = { field: created, direction: DESC }
    limit: Int = 20
  ): [Balance!]!
  transactions(
    where: TransactionFilter
    orderBy: TransactionSort! = { field: created, direction: DESC }
    limit: Int = 20
  ): [Transaction!]!
}

type Mutation {
  createBalance(input: NewBalance!): String!
  createTransaction(input: NewTransaction!): String!
  updateBalance(input: UpdateBalance!): String!
  updateTransaction(input: UpdateTransaction!): String!
  deleteBalance(id: String!): String!
  deleteTransaction(id: String!): String!
}